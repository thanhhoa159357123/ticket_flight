from pydantic import BaseModel, Field
from typing import Optional, List, Union
from datetime import datetime

class DatVe(BaseModel):
    ma_dat_ve: Optional[str] = None
    ngay_dat: datetime = Field(default_factory=datetime.now)
    trang_thai: str = "Ch·ªù x√°c nh·∫≠n"
    ma_khach_hang: str
    loai_chuyen_di: str = "M·ªôt chi·ªÅu"
    ma_hang_ve: Union[str, List[str]]
    ma_chuyen_bay: Union[str, List[str]]

    
#     # Optional fields
#     ghi_chu: Optional[str] = None
#     created_at: Optional[datetime] = Field(default_factory=datetime.now)
#     updated_at: Optional[datetime] = Field(default_factory=datetime.now)

#     @validator('ma_dat_ve', pre=True, always=True)
#     def generate_ma_dat_ve(cls, v):
#         if not v:
#             timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
#             random_suffix = str(uuid.uuid4())[:4].upper()
#             return f"DV{timestamp}{random_suffix}"
#         return v

#     @validator('ngay_dat', pre=True, always=True)
#     def set_ngay_dat(cls, v):
#         if isinstance(v, str):
#             try:
#                 return datetime.fromisoformat(v.replace('Z', '+00:00'))
#             except:
#                 return datetime.now()
#         return v or datetime.now()

#     @validator('loai_chuyen_di')
#     def validate_loai_chuyen_di(cls, v):
#         if v not in ["M·ªôt chi·ªÅu", "Kh·ª© h·ªìi"]:
#             raise ValueError('loai_chuyen_di ph·∫£i l√† "M·ªôt chi·ªÅu" ho·∫∑c "Kh·ª© h·ªìi"')
#         return v

#     @validator('ma_hang_ve')
#     def validate_ma_hang_ve(cls, v, values):
#         loai_chuyen_di = values.get('loai_chuyen_di')
        
#         if loai_chuyen_di == "M·ªôt chi·ªÅu":
#             # M·ªôt chi·ªÅu: ph·∫£i l√† string
#             if isinstance(v, list):
#                 raise ValueError('V√© m·ªôt chi·ªÅu: ma_hang_ve ph·∫£i l√† string, kh√¥ng ph·∫£i list')
#             if not v or not isinstance(v, str):
#                 raise ValueError('V√© m·ªôt chi·ªÅu: ma_hang_ve kh√¥ng ƒë∆∞·ª£c r·ªóng')
                
#         elif loai_chuyen_di == "Kh·ª© h·ªìi":
#             # Kh·ª© h·ªìi: ph·∫£i l√† list c√≥ 2 elements
#             if not isinstance(v, list):
#                 raise ValueError('V√© kh·ª© h·ªìi: ma_hang_ve ph·∫£i l√† list [ma_hang_ve_di, ma_hang_ve_ve]')
#             if len(v) != 2:
#                 raise ValueError('V√© kh·ª© h·ªìi: ma_hang_ve ph·∫£i c√≥ ƒë√∫ng 2 elements [ƒëi, v·ªÅ]')
#             if not all(v):  # Check all elements are not empty
#                 raise ValueError('V√© kh·ª© h·ªìi: c·∫£ 2 ma_hang_ve ƒë·ªÅu kh√¥ng ƒë∆∞·ª£c r·ªóng')
                
#         return v

#     @validator('ma_chuyen_bay')
#     def validate_ma_chuyen_bay(cls, v, values):
#         loai_chuyen_di = values.get('loai_chuyen_di')
        
#         if loai_chuyen_di == "M·ªôt chi·ªÅu":
#             # M·ªôt chi·ªÅu: ph·∫£i l√† string
#             if isinstance(v, list):
#                 raise ValueError('V√© m·ªôt chi·ªÅu: ma_chuyen_bay ph·∫£i l√† string, kh√¥ng ph·∫£i list')
#             if not v or not isinstance(v, str):
#                 raise ValueError('V√© m·ªôt chi·ªÅu: ma_chuyen_bay kh√¥ng ƒë∆∞·ª£c r·ªóng')
                
#         elif loai_chuyen_di == "Kh·ª© h·ªìi":
#             # Kh·ª© h·ªìi: ph·∫£i l√† list c√≥ 2 elements
#             if not isinstance(v, list):
#                 raise ValueError('V√© kh·ª© h·ªìi: ma_chuyen_bay ph·∫£i l√† list [ma_chuyen_bay_di, ma_chuyen_bay_ve]')
#             if len(v) != 2:
#                 raise ValueError('V√© kh·ª© h·ªìi: ma_chuyen_bay ph·∫£i c√≥ ƒë√∫ng 2 elements [ƒëi, v·ªÅ]')
#             if not all(v):  # Check all elements are not empty
#                 raise ValueError('V√© kh·ª© h·ªìi: c·∫£ 2 ma_chuyen_bay ƒë·ªÅu kh√¥ng ƒë∆∞·ª£c r·ªóng')
                
#         return v

#     @validator('trang_thai')
#     def validate_trang_thai(cls, v):
#         valid_states = [
#             "Ch·ªù x√°c nh·∫≠n", "ƒê√£ x√°c nh·∫≠n", "ƒê√£ thanh to√°n", 
#             "ƒê√£ h·ªßy", "ƒê√£ ho√†n ti·ªÅn", "ƒêang x·ª≠ l√Ω"
#         ]
#         if v not in valid_states:
#             raise ValueError(f'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Ch·ªçn m·ªôt trong: {", ".join(valid_states)}')
#         return v

#     class Config:
#         extra = "ignore"
#         json_encoders = {
#             datetime: lambda v: v.isoformat()
#         }

#     def dict(self, **kwargs):
#         """Override dict method ƒë·ªÉ handle datetime serialization"""
#         data = super().dict(**kwargs)
#         for key, value in data.items():
#             if isinstance(value, datetime):
#                 data[key] = value.isoformat()
#         return data

#     # üî• UTILITY METHODS
#     def get_ma_hang_ve_di(self) -> str:
#         """L·∫•y m√£ h·∫°ng v√© ƒëi"""
#         if isinstance(self.ma_hang_ve, str):
#             return self.ma_hang_ve
#         return self.ma_hang_ve[0]

#     def get_ma_hang_ve_ve(self) -> Optional[str]:
#         """L·∫•y m√£ h·∫°ng v√© v·ªÅ (n·∫øu c√≥)"""
#         if isinstance(self.ma_hang_ve, list) and len(self.ma_hang_ve) > 1:
#             return self.ma_hang_ve[1]
#         return None

#     def get_ma_chuyen_bay_di(self) -> str:
#         """L·∫•y m√£ chuy·∫øn bay ƒëi"""
#         if isinstance(self.ma_chuyen_bay, str):
#             return self.ma_chuyen_bay
#         return self.ma_chuyen_bay[0]

#     def get_ma_chuyen_bay_ve(self) -> Optional[str]:
#         """L·∫•y m√£ chuy·∫øn bay v·ªÅ (n·∫øu c√≥)"""
#         if isinstance(self.ma_chuyen_bay, list) and len(self.ma_chuyen_bay) > 1:
#             return self.ma_chuyen_bay[1]
#         return None

# # üî• REQUEST MODEL cho API
# class DatVeCreate(BaseModel):
#     ma_khach_hang: str
#     loai_chuyen_di: str = "M·ªôt chi·ªÅu"
#     ma_hang_ve: Union[str, List[str]]
#     ma_chuyen_bay: Union[str, List[str]]
#     ghi_chu: Optional[str] = None
#     trang_thai: Optional[str] = "Ch·ªù x√°c nh·∫≠n"
