from fastapi import APIRouter, HTTPException
from fastapi.responses import JSONResponse
from models.hangve import HangVe
from pymongo import MongoClient
from pymongo.errors import DuplicateKeyError
from utils.spark import load_df, invalidate_cache
from utils.env_loader import MONGO_URI, MONGO_DB
import traceback

router = APIRouter()
client = MongoClient(MONGO_URI)
hang_ve_collection = client[MONGO_DB]["hangve"]

# ============================== #
# üîç UTIL: Check t·ªìn t·∫°i b·∫±ng Spark cache
# ============================== #
def get_hang_ve_from_cache(ma_hang_ve: str):
    try:
        df = load_df("hangve")
        return df.filter(df["ma_hang_ve"] == ma_hang_ve).limit(1)
    except Exception as e:
        print(f"‚ùå L·ªói khi load cache hangve: {repr(e)}")
        return None

def check_hang_ve_exists(ma_hang_ve: str) -> bool:
    df = get_hang_ve_from_cache(ma_hang_ve)
    return df is not None and df.count() > 0

# ============================== #
# üìå POST: Th√™m m·ªõi
# ============================== #
@router.post("", tags=["hangve"])
def add_hang_ve(hangve: HangVe):
    try:
        data = hangve.dict()
        print(f"üì• Nh·∫≠n d·ªØ li·ªáu m·ªõi: {data}")

        if not data["ma_hang_ve"].strip() or not data["ten_hang_ve"].strip():
            raise HTTPException(status_code=400, detail="Th√¥ng tin kh√¥ng h·ª£p l·ªá")

        if check_hang_ve_exists(data["ma_hang_ve"]):
            raise HTTPException(status_code=400, detail="M√£ h·∫°ng v√© ƒë√£ t·ªìn t·∫°i")

        try:
            result = hang_ve_collection.insert_one(data)
            data["_id"] = str(result.inserted_id)
        except DuplicateKeyError:
            raise HTTPException(status_code=400, detail="M√£ h·∫°ng v√© ƒë√£ t·ªìn t·∫°i")

        invalidate_cache("hangve")
        print(f"‚úÖ ƒê√£ th√™m h·∫°ng v√©: {data['ma_hang_ve']}")
        return JSONResponse(content={"message": "Th√™m h·∫°ng v√© th√†nh c√¥ng", **data}, status_code=201)

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå L·ªói POST: {repr(e)}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="L·ªói server n·ªôi b·ªô")

# ============================== #
# üìå GET: T·∫•t c·∫£
# ============================== #
@router.get("", tags=["hangve"])
def get_all_hang_ve():
    try:
        df = load_df("hangve").select(
            "ma_hang_ve", "ten_hang_ve", "so_kg_hanh_ly_ky_gui",
            "so_kg_hanh_ly_xach_tay", "so_do_ghe", "khoang_cach_ghe",
            "refundable", "changeable"
        )
        result = df.toPandas().to_dict(orient="records")
        print(f"‚úÖ T·∫£i {len(result)} h·∫°ng v√© t·ª´ cache")
        return JSONResponse(content=result)

    except Exception as e:
        print(f"‚ùå L·ªói GET all: {repr(e)}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="L·ªói server n·ªôi b·ªô")

# ============================== #
# üìå GET: Theo m√£
# ============================== #
@router.get("/{ma_hang_ve}", tags=["hangve"])
def get_hang_ve_by_id(ma_hang_ve: str):
    try:
        df = get_hang_ve_from_cache(ma_hang_ve)
        if not df or df.count() == 0:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y h·∫°ng v√©")

        result = df.toPandas().to_dict(orient="records")[0]
        return JSONResponse(content=result)

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå L·ªói GET by id: {repr(e)}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="L·ªói server n·ªôi b·ªô")

# ============================== #
# üìå PUT: C·∫≠p nh·∫≠t
# ============================== #
@router.put("/{ma_hang_ve}", tags=["hangve"])
def update_hang_ve(ma_hang_ve: str, hangve: HangVe):
    try:
        df = get_hang_ve_from_cache(ma_hang_ve)
        if not df or df.count() == 0:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y h·∫°ng v√©")

        update_data = hangve.dict()
        update_data["ma_hang_ve"] = ma_hang_ve

        result = hang_ve_collection.update_one(
            {"ma_hang_ve": ma_hang_ve}, {"$set": update_data}
        )
        if result.matched_count == 0:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y h·∫°ng v√©")

        invalidate_cache("hangve")
        print(f"‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng: {ma_hang_ve}")
        return JSONResponse(content={"message": "C·∫≠p nh·∫≠t h·∫°ng v√© th√†nh c√¥ng"})

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå L·ªói PUT: {repr(e)}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="L·ªói server n·ªôi b·ªô")

# ============================== #
# üìå DELETE: Xo√°
# ============================== #
@router.delete("/{ma_hang_ve}", tags=["hangve"])
def delete_hang_ve(ma_hang_ve: str):
    try:
        df = get_hang_ve_from_cache(ma_hang_ve)
        if not df or df.count() == 0:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y h·∫°ng v√©")

        result = hang_ve_collection.delete_one({"ma_hang_ve": ma_hang_ve})
        if result.deleted_count == 0:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y h·∫°ng v√©")

        invalidate_cache("hangve")
        print(f"‚úÖ ƒê√£ xo√° h·∫°ng v√©: {ma_hang_ve}")
        return JSONResponse(content={"message": "Xo√° h·∫°ng v√© th√†nh c√¥ng"})

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå L·ªói DELETE: {repr(e)}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="L·ªói server n·ªôi b·ªô")
