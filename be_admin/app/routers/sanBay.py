from fastapi import APIRouter, HTTPException, Body
from fastapi.responses import JSONResponse
from app.models.san_bay import SanBay
from utils.spark import load_df, invalidate_cache, get_spark
from utils.env_loader import DATA_MONGO_DB, DATA_MONGO_URI
from pymongo import MongoClient
import traceback

router = APIRouter()

# K·∫øt n·ªëi MongoDB
client = MongoClient(DATA_MONGO_URI)
san_bay_collection = client[DATA_MONGO_DB]["sanbay"]

@router.post("", tags=["sanbay"])
def add_san_bay(san_bay: SanBay):
    try:
        print("üì• D·ªØ li·ªáu nh·∫≠n t·ª´ client:", san_bay.dict())

        df = load_df("sanbay")

        if (
            "ma_san_bay" in df.columns
            and df.filter(df["ma_san_bay"] == san_bay.ma_san_bay).count() > 0
        ):
            raise HTTPException(status_code=400, detail="S√¢n bay ƒë√£ t·ªìn t·∫°i")

        data_to_insert = san_bay.dict()
        inserted = san_bay_collection.insert_one(data_to_insert)

        invalidate_cache("sanbay")
        print("üéâ Th√™m s√¢n bay th√†nh c√¥ng:", san_bay.ma_san_bay)

        # G·∫Øn l·∫°i _id v√†o dict theo d·∫°ng chu·ªói n·∫øu mu·ªën tr·∫£ v·ªÅ
        data_to_insert["_id"] = str(inserted.inserted_id)

        return JSONResponse(
            content={"message": "Th√™m s√¢n bay th√†nh c√¥ng", "san_bay": data_to_insert}
        )

    except Exception as e:
        print("‚ùå L·ªói trong /add:", str(e))
        raise HTTPException(status_code=500, detail="L·ªói server n·ªôi b·ªô")


@router.get("", tags=["sanbay"])
def get_all_san_bay():
    try:
        df = load_df("sanbay")

        # C√°c c·ªôt mong mu·ªën
        df = df.select("ma_san_bay", "ten_san_bay", "thanh_pho","ma_quoc_gia","iata_code")
        result = df.toPandas().to_dict(orient="records")

        return JSONResponse(content=result)
        
        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ th√¥ng b√°o
        if not result:
            return JSONResponse(content={"message": "Kh√¥ng c√≥ san bay n√†o"}) 
    except Exception as e:
        traceback.print_exc()
        print("‚ùå L·ªói trong get_all_san_bay:", str(e))
        raise HTTPException(status_code=500, detail="L·ªói server n·ªôi b·ªô")



# x·ª≠ l√Ω ph·∫ßn s·ª≠a s√¢n bay
@router.put("/{ma_san_bay}", tags=["sanbay"])
def update_san_bay(ma_san_bay: str, updated_data: dict = Body(...)):
    try:
        print(f"‚úèÔ∏è Nh·∫≠n y√™u c·∫ßu c·∫≠p nh·∫≠t s√¢n bay: {ma_san_bay}, d·ªØ li·ªáu: {updated_data}")

        # Ki·ªÉm tra h√£ng bay c√≥ t·ªìn t·∫°i kh√¥ng
        existing_san_bay = san_bay_collection.find_one({"ma_san_bay": ma_san_bay})
        if not existing_san_bay:
            raise HTTPException(status_code=404, detail="S√¢n bay kh√¥ng t·ªìn t·∫°i")

        if "ma_san_bay" in updated_data:
            updated_data.pop("ma_san_bay")  # Kh√¥ng cho ph√©p c·∫≠p nh·∫≠t m√£ h√£ng bay
            updated_data["ten_san_bay"] = updated_data.get("ten_san_bay", existing_san_bay["ten_san_bay"])
            updated_data["thanh_pho"] = updated_data.get("thanh_pho",existing_san_bay["thanh_pho"])
            updated_data["ma_quoc_gia"] = updated_data.get("ma_quoc_gia", existing_san_bay["ma_quoc_gia"])
            updated_data["iata_code"] = updated_data.get("iata_code", existing_san_bay["iata_code"])

        result = san_bay_collection.update_one(
            {"ma_san_bay": ma_san_bay},
            {"$set": updated_data}
        )
        invalidate_cache("sanbay")

        if result.modified_count == 0:
            return JSONResponse(
                content={"message": "Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán"},
                status_code=200
            )
        
        return JSONResponse(
            content={"message": f"C·∫≠p nh·∫≠t s√¢n bay {ma_san_bay} th√†nh c√¥ng"}
        )
    except HTTPException as he:
        raise he
    except Exception as e:
        traceback.print_exc()
        print("‚ùå L·ªói trong /update:", str(e))
        raise HTTPException(status_code=500, detail="L·ªói server n·ªôi b·ªô")



@router.delete("/{ma_san_bay}", tags=["sanbay"])
def delete_hang_bay(ma_san_bay: str):
    try:
        print(f"üóë Nh·∫≠n y√™u c·∫ßu xo√° tuy·∫øn bay: {ma_san_bay}")

        result = san_bay_collection.delete_one({"ma_san_bay": ma_san_bay})

        if result.deleted_count == 0:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y s√¢n bay c·∫ßn xo√°")

        return JSONResponse(content={"message": f"ƒê√£ xo√° h√£ng bay {ma_san_bay} th√†nh c√¥ng"})

    except HTTPException as he:
        raise he

    except Exception as e:
        print("‚ùå L·ªói trong /delete:", str(e))
        raise HTTPException(status_code=500, detail="L·ªói server n·ªôi b·ªô")
    



if __name__ == "__main__":
    print("‚úÖ Router hangBay ƒë√£ s·∫µn s√†ng")
